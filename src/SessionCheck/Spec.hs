{-# LANGUAGE GADTs, TypeOperators #-}
module SessionCheck.Spec where

import Control.Monad

import SessionCheck.Classes
import SessionCheck.Predicate

-- Specifications of protocols
data Spec t a where
  Get   :: a :< t => Predicate a -> Spec t a
  Send  :: a :< t => Predicate a -> Spec t a
  Fork  :: Spec t a -> Spec t ()
  Stop  :: Spec t a
  -- Monadic fragment
  Return :: a -> Spec t a
  Bind   :: Spec t a -> (a -> Spec t b) -> Spec t b

-- Monads, Gonads, Applicatives, Functors and all that...
instance Monad (Spec t) where
  return = Return
  (>>=)  = Bind

instance Applicative (Spec t) where
  pure  = Return
  (<*>) = ap

instance Functor (Spec t) where
  fmap = liftM

-- Recevie a value which satisfies a predicate
get :: a :< t => Predicate a -> Spec t a
get = Get

-- Send a value which satisfies a predicate
send :: a :< t => Predicate a -> Spec t a
send = Send

-- Run a protocol in parallel on the same channel
fork :: Spec t a -> Spec t ()
fork = Fork

-- Terminate a session (or a sub-session generated by `fork`)
stop :: Spec t a
stop = Stop

-- Run two protocols in parallel
(//) :: Spec t a -> Spec t b -> Spec t ()
l // r = fork l >> r >> return ()

-- The dual of a predicate, `dual . dual = id`
dual :: Spec t a -> Spec t a
dual s = case s of
  Get p    -> Send p
  Send p   -> Get p
  Fork s   -> Fork (dual s)
  Stop     -> Stop
  Return a -> Return a
  Bind s f -> Bind (dual s) (dual . f)

-- Representation of threads which hide the intermediate types
data Thread t where
  Hide :: Spec t a -> (a -> Spec t b) -> Thread t

-- Simply hide a Spec
hide :: Spec t a -> Thread t
hide s = Hide s (\_-> Stop)
